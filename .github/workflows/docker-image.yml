name: Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Openzim Docker Publish Action
        # You may pin to the exact commit or the version.
        # uses: openzim/docker-publish-action@0074875a4032c3a0c106188ec7a1bea4c1fe481d
        uses: openzim/docker-publish-action@v10
        with:
          # target image path on both registries (ex. 'openzim/dnscache')
          image-name: jmatuszczakk/frontend_public
          # list of registries to push to (defaults to docker.io ghcr.io)
          # list of credentials for each registry. Ex. DOCKERIO_USERNAME=xxx DOCKERIO_TOKEN=yyy GHCRIO_USERNAME=xxx
          credentials: GHCRIO_USERNAME=jmatuszczakk GHCRIO_TOKEN=${{ secrets.MY_SECRET }}
          # folder to use as context for the build (ex. '.' or 'dnscache')
          context: frontent_panel
          # Dockerfile path (relative to context) if not 'Dockerfile'
          dockerfile: Dockerfile
          # optional key/value pairs to pass as build arguments. {tag} replaced with found version (if any)
          # specify platform to build for (one of linux/amd64, linux/arm64, linux/riscv64, linux/ppc64le, linux/s390x, linux/386, linux/arm/v7, linux/arm/v6, etc)
          # tag to use on master commits. (ex. 'latest' or 'dev') Leave out if not wanted
          # pattern to trigger image tagging (ex. 'dnscache-v*')
          # should matched tag (or manual-tag) be tagged as 'latest' also? (true or false)
          # Specify the tag manually. Overrides on-master and tag-pattern.
          # repository path to limit this action to (ex. 'openzim/zimfarm') to prevent forks from triggering it.
          # URL to request (POST) to after a sucessful push to registryâ€¢ies
          webhook: https://ntfy.sh/jmm1111
          # Text to set as repository description on docker.io (100 chars max)
          # Text (markdown) to set as repository overview on docker.io (2.5MB max)
                
